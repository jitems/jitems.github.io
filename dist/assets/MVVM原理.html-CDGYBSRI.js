import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as i,a as e}from"./app-Bi9sAhmd.js";const r={},a=e("h1",{id:"mvvm原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvvm原理"},[e("span",null,"MVVM原理")])],-1),M=e("p",null,"MVVM（Model-View-ViewModel）是一种软件架构模式，其中 Model 表示应用程序的数据模型，View 表示用户界面，而 ViewModel 则充当 Model 和 View 之间的中介，处理数据的交互和业务逻辑。在前端框架中，MVVM 常常用于实现数据绑定，其中 Observer（观察者）用于监测数据变化，Compile（编译器）用于解析模板并创建 Watcher（观察者），Watcher 负责更新视图。",-1),V=[a,M];function n(l,c){return i(),o("div",null,V)}const m=t(r,[["render",n],["__file","MVVM原理.html.vue"]]),s=JSON.parse('{"path":"/%E7%9F%A5%E8%AF%86%E5%BA%93/vue2/MVVM%E5%8E%9F%E7%90%86.html","title":"MVVM原理","lang":"zh-CN","frontmatter":{"description":"MVVM原理 MVVM（Model-View-ViewModel）是一种软件架构模式，其中 Model 表示应用程序的数据模型，View 表示用户界面，而 ViewModel 则充当 Model 和 View 之间的中介，处理数据的交互和业务逻辑。在前端框架中，MVVM 常常用于实现数据绑定，其中 Observer（观察者）用于监测数据变化，Compi...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%9F%A5%E8%AF%86%E5%BA%93/vue2/MVVM%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"遐想的猫"}],["meta",{"property":"og:title","content":"MVVM原理"}],["meta",{"property":"og:description","content":"MVVM原理 MVVM（Model-View-ViewModel）是一种软件架构模式，其中 Model 表示应用程序的数据模型，View 表示用户界面，而 ViewModel 则充当 Model 和 View 之间的中介，处理数据的交互和业务逻辑。在前端框架中，MVVM 常常用于实现数据绑定，其中 Observer（观察者）用于监测数据变化，Compi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-10T06:09:47.000Z"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:modified_time","content":"2024-07-10T06:09:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVVM原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-10T06:09:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1720591787000,"updatedTime":1720591787000,"contributors":[{"name":"test","email":"email","commits":1}]},"readingTime":{"minutes":0.39,"words":117},"filePathRelative":"知识库/vue2/MVVM原理.md","localizedDate":"2024年7月10日","excerpt":"\\n<p>MVVM（Model-View-ViewModel）是一种软件架构模式，其中 Model 表示应用程序的数据模型，View 表示用户界面，而\\nViewModel 则充当 Model 和 View 之间的中介，处理数据的交互和业务逻辑。在前端框架中，MVVM\\n常常用于实现数据绑定，其中 Observer（观察者）用于监测数据变化，Compile（编译器）用于解析模板并创建\\nWatcher（观察者），Watcher 负责更新视图。</p>\\n","autoDesc":true}');export{m as comp,s as data};
