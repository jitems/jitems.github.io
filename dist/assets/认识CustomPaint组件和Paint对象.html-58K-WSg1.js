import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as a,a as t,d as n,o as l}from"./app-Bi9sAhmd.js";const e={},h=t("p",null," ",-1),k=n(`<h1 id="custompaint组件和paint对象" tabindex="-1"><a class="header-anchor" href="#custompaint组件和paint对象"><span>CustomPaint组件和Paint对象</span></a></h1><h2 id="custompaint" tabindex="-1"><a class="header-anchor" href="#custompaint"><span>CustomPaint</span></a></h2><p><strong>CustomPaint</strong>是flutter的一个组件，所以我们可以像其他组件一样使用：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">CustomPaint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({ </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  CustomPainter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> painter,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 绘制在子元素的下层</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  CustomPainter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> foregroundPainter,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 绘制在子元素的上层</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  Size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.zero,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 约定的布局大小，有子元素就为子元素大小</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> isComplex </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 绘制复杂的图形时应为 true</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> willChange </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 在下一帧时是否会发生改变</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  Widget</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> child,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 子元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>CustomPaint</strong>中，要想自由的绘制内容，需要使用<strong>painter</strong>或<strong>foregroundPainter</strong>属性。传入一个自定义继承<strong>CustomPainter</strong>的类。</p><p>在继承<strong>CustomPainter</strong>后有两个必须重写的方法。在<strong>paint</strong>方法中进行绘制操作，<strong>shouldRepaint</strong>方法用来描述绘制的内容什么时候应该更新</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> MyCustomPainter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> CustomPainter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  @override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> paint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> canvas, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> size) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // TODO: implement paint</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> shouldRepaint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">covariant</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> CustomPainter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> oldDelegate) </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> oldDelegate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前提代码：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> HomePage</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> StatelessWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> HomePage</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(key</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> key);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  @override</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">  Widget</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">BuildContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> context) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Scaffold</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      body</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> CustomPaint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        painter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> MyCustomPainter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 如果CustomPaint的父元素没有指定大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // CusotmPaint的子元素没有指定大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // CustomPaint的size属性没有指定大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 绘画出来的显示效果和有指定大小的完全不一样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.infinite,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是在页面中绘制一个宽250，高300的矩形：</p><img src="https://jitems.github.io/blog/bk436.png" alt="solar"><h2 id="paint" tabindex="-1"><a class="header-anchor" href="#paint"><span>Paint</span></a></h2><p><strong>Paint</strong>相当于一支画笔，可以自定义画笔的颜色、粗细等。首先实例化一个<strong>Paint</strong>对象：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> paint </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Paint</strong>类和绘制内容相关的属性一共有14个：</p><h3 id="style" tabindex="-1"><a class="header-anchor" href="#style"><span>style</span></a></h3><p><strong>style</strong> → <strong>PaintStyle?</strong>，是否绘制内部形状，形状的边缘，或两者都绘制</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 填充(默认)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.style </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> PaintingStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.fill; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 描边</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.style </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> PaintingStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.stroke;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk437.png" alt="solar"><h3 id="color" tabindex="-1"><a class="header-anchor" href="#color"><span>Color</span></a></h3><p><strong>color</strong> → <strong>Color?</strong>，描边或填充形状时使用的颜色。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 默认为不透明黑色Colors.black</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.color </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Colors</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.red;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk438.png" alt="solar"><h3 id="colorfilter" tabindex="-1"><a class="header-anchor" href="#colorfilter"><span>colorFilter</span></a></h3><p>colorFilter → ColorFilter?，绘制形状或合成图层时应用的颜色过滤器，绘制形状时， colorFilter会覆盖color和shader。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 构造一个将 sRGB 伽马曲线应用于 RGB 通道的滤色器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.colorFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ColorFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">linearToSrgbGamma</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个颜色过滤器，将 sRGB 伽马曲线的倒数应用于 RGB 通道</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.colorFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ColorFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">srgbToLinearGamma</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 构造一个通过 5x5 矩阵转换颜色的滤色器，其中第五行隐式添加到标识配置中。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 每个像素的颜色值，表示为&lt;code&gt;R, G, B, A&lt;/code&gt; ，乘以矩阵以创建新颜色：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// | R&#39; |   | a00 a01 a02 a03 a04 |   | R |</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// | G&#39; |   | a10 a11 a22 a33 a44 |   | G |</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// | B&#39; | = | a20 a21 a22 a33 a44 | * | B |</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// | A&#39; |   | a30 a31 a22 a33 a44 |   | A |</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// | 1  |   |  0   0   0   0   1  |   | 1 |</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 矩阵按行优先顺序排列，转换列在未归一化的 0...255 空间中指定。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.colorFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ColorFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">      0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个颜色过滤器，应用作为第二个参数给出的混合模式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 源颜色是作为第一个参数给出的颜色，目标颜色是来自正在合成的图层的颜色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.colorFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> ColorFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Colors</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.blue, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">BlendMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.colorBurn);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk439.png" alt="solar"><h3 id="invertcolors" tabindex="-1"><a class="header-anchor" href="#invertcolors"><span>invertColors</span></a></h3><p><strong>invertColors</strong> → <strong>bool?</strong>， 绘制时图像的颜色是否反转。 反转图像的颜色会应用一个新的滤色器，该滤色器将与任何用户提供的滤色器组成。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.invertColors </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk440.png" alt="solar"><h3 id="isantialias" tabindex="-1"><a class="header-anchor" href="#isantialias"><span>isAntiAlias</span></a></h3><p><strong>isAntiAlias</strong> → <strong>bool?</strong>，是否对画布上绘制的线条和图像应用抗锯齿，使用了抗锯齿边缘更平滑。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 默认值为true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.isAntiAlias </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk441.png" alt="solar"><h3 id="strokecap" tabindex="-1"><a class="header-anchor" href="#strokecap"><span>strokeCap</span></a></h3><p><strong>strokeCap</strong> → <strong>StrokeCap？</strong>，当style设置为<strong>PaintingStyle.stroke</strong>时放置在画线末端的饰面</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 以平坦边缘开始和结束轮廓，没有延伸</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.strokeCap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> StrokeCap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.butt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 以半圆形延伸开始和结束轮廓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.strokeCap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> StrokeCap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.round;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 以半方形扩展开始和结束轮廓。这类似于将每个轮廓扩展一半笔画宽度（由Paint.strokeWidth绘制）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.strokeCap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> StrokeCap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.square;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk442.png" alt="solar"><h3 id="strokejoin" tabindex="-1"><a class="header-anchor" href="#strokejoin"><span>strokeJoin</span></a></h3><p><strong>strokeJoin</strong> → <strong>StrokeJoin?</strong>，放置在段之间的连接处的那种饰面，只适用于绘制路径（即<strong>PaintingStyle.stroke</strong>）。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 线段之间的连接将线段对接端的角连接起来，以提供斜切外观</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.strokeJoin </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> StrokeJoin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.bevel;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 线段之间的连接形成尖角</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.strokeJoin </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> StrokeJoin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.miter;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 线段之间的连接是半圆形的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.strokeJoin </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> StrokeJoin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.round;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk443.png" alt="solar"><h3 id="strokemiterlimit" tabindex="-1"><a class="header-anchor" href="#strokemiterlimit"><span>strokeMiterLimit</span></a></h3><p><strong>strokeMiterLimit</strong> → <strong>double?</strong>，当连接设置为<strong>StrokeJoin.miter</strong>且<strong>style</strong>设置为<strong>PaintingStyle.stroke</strong>时，在线段上绘制斜接的限制。如果超出此限制，则会改为绘制<strong>StrokeJoin.bevel</strong>连接。</p><p>关于<strong>strokeMiterLimit</strong>是什么可以查看以下文章：</p><ul><li><a href="https://www.cnblogs.com/linyuzhaozhao/p/7096907.html" target="_blank" rel="noopener noreferrer">一张图告诉你 canvas 中的 miterLimit 代表着什么</a></li><li><a href="https://www.oxxostudio.tw/articles/201409/svg-16-storke-miterlimit.html" target="_blank" rel="noopener noreferrer">SVG 研究之路 (16) - Stroke-miterlimit</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke-miterlimit" target="_blank" rel="noopener noreferrer">MDN：stroke-miterlimit</a></li></ul><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 默认为4.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.strokeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk444.png" alt="solar"><h3 id="strokewidth" tabindex="-1"><a class="header-anchor" href="#strokewidth"><span>strokeWidth</span></a></h3><p><strong>strokeWidth</strong> → <strong>double?</strong>，当<strong>style</strong>设置为PaintingStyle.stroke时绘制边缘的宽度。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 默认值为0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.strokeWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk445.png" alt="solar"><h3 id="shader" tabindex="-1"><a class="header-anchor" href="#shader"><span>shader</span></a></h3><p><strong>shader</strong> → <strong>Shader?</strong>，用来描边或填充形状时使用的着色器。当它为空时，将使用color。</p><p><strong>shader</strong>属性传递的值为 Gradient 或 ImageShader对象。</p><p>关于<strong>shader</strong>的使用方法可以查看以下文章：</p><ul><li><a href="https://juejin.cn/post/6938371371760091150" target="_blank" rel="noopener noreferrer">Flutter绘制-05-shader专项</a></li></ul><h3 id="blendmode" tabindex="-1"><a class="header-anchor" href="#blendmode"><span>blendMode</span></a></h3><p><strong>blendMode</strong> → <strong>BlendMode?</strong>，在画布上绘画时使用的算法。在画布上绘制形状或图像时，可以使用不同的算法来混合像素。</p><p>关于<strong>BlendMode</strong>的相关资料可以查看以下文章：</p><ul><li><a href="https://blog.csdn.net/chenlove1/article/details/84574237" target="_blank" rel="noopener noreferrer">Flutter BlendMode混合模式详解</a></li><li><a href="https://juejin.cn/post/6938018149493112869#heading-3" target="_blank" rel="noopener noreferrer">Flutter绘制-04-BlendMode专项</a></li></ul><h3 id="filterquality" tabindex="-1"><a class="header-anchor" href="#filterquality"><span>filterQuality</span></a></h3><p><strong>filterQuality</strong> → <strong>FilterQuality？</strong></p><p>用于对图像进行采样的<strong>ImageFilter</strong>和<strong>Shader</strong>对象中的图像采样以及用于渲染图像的<strong>Canvas</strong>操作的质量级别。 当按比例放大时，质量通常是最低的， <strong>low</strong>和<strong>medium</strong>的质量<strong>none</strong> ，而对于非常大的比例因子（超过 10 倍），质量最高的是<strong>high</strong> 。 缩小时， <strong>medium</strong>提供最佳质量，尤其是在将图像缩小到小于其大小的一半或在此类缩小之间为比例因子设置动画时。否则， <strong>low</strong>和<strong>high</strong>在 50% 和 100% 之间的减少提供类似的效果，但图像可能会丢失细节并具有低于 50% 的丢失。 为了在放大和缩小图像或比例未知时获得高质量， <strong>medium</strong>通常是一个很好的平衡选择。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.filterQuality </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> FilterQuality</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.none;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.filterQuality </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> FilterQuality</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.low;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.filterQuality </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> FilterQuality</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.medium;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.filterQuality </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> FilterQuality</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.high;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="imagefilter" tabindex="-1"><a class="header-anchor" href="#imagefilter"><span>imageFilter</span></a></h3><p><strong>imageFilter</strong> → <strong>ImageFilter?</strong></p><p>设置绘制图片时的图像过滤器。imageFilter 一共有3个值用来设置：</p><h4 id="imagefilter-blur" tabindex="-1"><a class="header-anchor" href="#imagefilter-blur"><span>ImageFilter.blur</span></a></h4><p>用来设置图片高斯模糊显示效果，可以传入3个参数：</p><ul><li><code>double sigmaX</code>：创建 x 轴的高斯模糊度</li><li><code>double sigmaY</code>：创建 y 轴的高斯模糊度</li><li><code>TileMode tileMode</code>：这个enum用于定义渐变或图像过滤器应该如何处理定义的内部区域之外的区域</li></ul><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.imageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">blur</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(sigmaX</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, sigmaY</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, tileMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> TileMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.clamp);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk446.png" alt="solar"><p>仔细查看图片的边缘，会有不同的效果。</p><h4 id="imagefilter-matrix" tabindex="-1"><a class="header-anchor" href="#imagefilter-matrix"><span>ImageFilter.matrix</span></a></h4><p>用来设置图片变形状。</p><p>该属性的用法繁多并且复杂，以后有时间再慢慢研究。要想使用简单的方法实现变形效果，只要在方法后面加上<strong>storage</strong>即可：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.imageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Matrix4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">skew</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, .</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).storage);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk447.png" alt="solar"><h4 id="imagefilter-compose" tabindex="-1"><a class="header-anchor" href="#imagefilter-compose"><span>ImageFilter.compose</span></a></h4><p>用来组合实现图片高斯模糊和变形。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> outer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">blur</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(sigmaX</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, sigmaY</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, tileMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> TileMode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.decal);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> inner </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Matrix4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">skew</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, .</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).storage);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.imageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ImageFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">compose</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(outer</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> outer, inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> inner);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk448.png" alt="solar"><h3 id="maskfilter" tabindex="-1"><a class="header-anchor" href="#maskfilter"><span>maskFilter</span></a></h3><p>蒙版过滤器（例如，模糊），用于在绘制后但在将其合成到图像之前应用于形状。需要传入2个参数：</p><ul><li><code>BlurStyle _style</code>：MaskFilter对象中用于模糊的样式</li><li><code>double _sigma</code>：控制效果的大小。它是要应用的高斯模糊的标准偏差。该值必须大于零。 sigma 大致对应于效果半径的一半（以像素为单位）</li></ul><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">paint.maskFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> MaskFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">blur</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(_style, _sigma);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://jitems.github.io/blog/bk449.png" alt="solar">`,89);function r(p,d){return l(),s("div",null,[h,a(" more "),k])}const B=i(e,[["render",r],["__file","认识CustomPaint组件和Paint对象.html.vue"]]),c=JSON.parse('{"path":"/flutter%E6%95%99%E7%A8%8B/%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8/%E8%AE%A4%E8%AF%86CustomPaint%E7%BB%84%E4%BB%B6%E5%92%8CPaint%E5%AF%B9%E8%B1%A1.html","title":"CustomPaint组件和Paint对象","lang":"zh-CN","frontmatter":{"title":"CustomPaint组件和Paint对象","category":["前端"],"tag":["flutter"],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/flutter%E6%95%99%E7%A8%8B/%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8/%E8%AE%A4%E8%AF%86CustomPaint%E7%BB%84%E4%BB%B6%E5%92%8CPaint%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"遐想的猫"}],["meta",{"property":"og:title","content":"CustomPaint组件和Paint对象"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-10T06:34:54.000Z"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:tag","content":"flutter"}],["meta",{"property":"article:modified_time","content":"2024-07-10T06:34:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CustomPaint组件和Paint对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-10T06:34:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"CustomPaint","slug":"custompaint","link":"#custompaint","children":[]},{"level":2,"title":"Paint","slug":"paint","link":"#paint","children":[{"level":3,"title":"style","slug":"style","link":"#style","children":[]},{"level":3,"title":"Color","slug":"color","link":"#color","children":[]},{"level":3,"title":"colorFilter","slug":"colorfilter","link":"#colorfilter","children":[]},{"level":3,"title":"invertColors","slug":"invertcolors","link":"#invertcolors","children":[]},{"level":3,"title":"isAntiAlias","slug":"isantialias","link":"#isantialias","children":[]},{"level":3,"title":"strokeCap","slug":"strokecap","link":"#strokecap","children":[]},{"level":3,"title":"strokeJoin","slug":"strokejoin","link":"#strokejoin","children":[]},{"level":3,"title":"strokeMiterLimit","slug":"strokemiterlimit","link":"#strokemiterlimit","children":[]},{"level":3,"title":"strokeWidth","slug":"strokewidth","link":"#strokewidth","children":[]},{"level":3,"title":"shader","slug":"shader","link":"#shader","children":[]},{"level":3,"title":"blendMode","slug":"blendmode","link":"#blendmode","children":[]},{"level":3,"title":"filterQuality","slug":"filterquality","link":"#filterquality","children":[]},{"level":3,"title":"imageFilter","slug":"imagefilter","link":"#imagefilter","children":[]},{"level":3,"title":"maskFilter","slug":"maskfilter","link":"#maskfilter","children":[]}]}],"git":{"createdTime":1659952375000,"updatedTime":1720593294000,"contributors":[{"name":"test","email":"email","commits":2}]},"readingTime":{"minutes":6.56,"words":1968},"filePathRelative":"flutter教程/功能使用/认识CustomPaint组件和Paint对象.md","localizedDate":"2022年8月8日","excerpt":"<p>&nbsp;</p>\\n"}');export{B as comp,c as data};
