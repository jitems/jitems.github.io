import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-Bi9sAhmd.js";const n={},l=a(`<h1 id="常规" tabindex="-1"><a class="header-anchor" href="#常规"><span>常规</span></a></h1><h2 id="解决花括号问题" tabindex="-1"><a class="header-anchor" href="#解决花括号问题"><span>解决花括号问题</span></a></h2><p>标签样式中加 v-cloak v-克楼克</p><p>在css中加</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;">v-cloak</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">none</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> !important</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue是什么" tabindex="-1"><a class="header-anchor" href="#vue是什么"><span>vue是什么</span></a></h2><p>Vue是一款基于MVVM架构的渐进式框架，它主要用于构建单页面应用（spa），它的特点有声明式渲染、响应式两大点</p><h2 id="什么是响应式" tabindex="-1"><a class="header-anchor" href="#什么是响应式"><span>什么是响应式</span></a></h2><p>响应式就是在我们修改数据之后，无需手动触发视图更新，视图会自动更新。</p><h2 id="vue中data为什么是一个函数" tabindex="-1"><a class="header-anchor" href="#vue中data为什么是一个函数"><span>vue中data为什么是一个函数</span></a></h2><p>vue的data是一个函数的原因是，确保每一个vue组件的实例是唯一的，数据是不共享的，更容易维护的</p><h2 id="vue的优点-vue的缺点" tabindex="-1"><a class="header-anchor" href="#vue的优点-vue的缺点"><span>Vue的优点? vue的缺点?</span></a></h2><p>优点: 渐进式，组件化，轻量级，虚拟dom，响应式，单页面路由，数据与视图分开 缺点: 单页面不利于seo，不支持IE8以下，首屏加载时间长</p><h2 id="v-if和v-show有何区别" tabindex="-1"><a class="header-anchor" href="#v-if和v-show有何区别"><span>v-if和v-show有何区别？</span></a></h2><p>核心：v-if 会导致 组件（dom）的重新渲染，但是 v-show 不会。</p><ul><li>v-if元素不可见，直接删除DOM，有更高的切换消耗。</li><li>v-show通过设置元素display: none控制显示隐藏，更高的初始渲染消耗。</li></ul><h2 id="为什么v-if和v-for不建议用在同一标签" tabindex="-1"><a class="header-anchor" href="#为什么v-if和v-for不建议用在同一标签"><span>为什么v-if和v-for不建议用在同一标签？</span></a></h2><ul><li>在Vue2中，v-for的优先级要高于v-if，但是在Vue3中，v-for的优先级要低于v-if。</li><li>在Vue2中，会先通过v-for遍历，然后对每一项使用v-if判断，不满足条件的不会渲染，但是这种方式并不好，相当于对很多个标签都添加了v-if，每次渲染之前都要判断。于是在Vue3中，v-if的优先级要高于v-for了，相当于在v-for外层包裹了一层，但是这时的判断条件肯定是错的，因此在vue3中同一标签使用v-for和v-if时，会报错。</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;tod in tods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;tod.name!=&#39;&#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  {{tod.name}}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在外面包裹一层<code>&lt;template&gt;</code> 再在其上使用v-for 可以解决这个问题</p><h2 id="computed-康pu-来的-和watch-喔企-的区别" tabindex="-1"><a class="header-anchor" href="#computed-康pu-来的-和watch-喔企-的区别"><span>computed(康pu 来的) 和watch(喔企)的区别</span></a></h2><ul><li>1、computed 默认执行一次，watch默认不会执行</li><li>2、computed 支持缓存，只有依赖数据发生改变，才会重新进行计算；watch 不支持缓存，数据变，直接会触发相应的操作</li><li>3、computed 不支持异步，当computed内有异步操作时无效，无法监听数据的变化；watch 支持异步</li></ul><h2 id="为什么不建议用index做key-为什么不建议用随机数做key" tabindex="-1"><a class="header-anchor" href="#为什么不建议用index做key-为什么不建议用随机数做key"><span>为什么不建议用index做key，为什么不建议用随机数做key？</span></a></h2><p>用index和用随机数都是同理，随机数每次都在变，做不到专一性，也很消耗性能</p><h2 id="nexttick-莱克斯-特克-的使用场景和原理" tabindex="-1"><a class="header-anchor" href="#nexttick-莱克斯-特克-的使用场景和原理"><span>nextTick(莱克斯 特克) 的使用场景和原理</span></a></h2><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h3><p>nextTick 是在下次 DOM 更新循环结束之后执行的一个方法。一般在修改数据之后使用这个方法操作更新后的 DOM。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Hello Vue!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  methods</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    example</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 修改数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;changed&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // DOM 尚未更新</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // DOM 现在更新了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;DOM 现在更新了&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>在 Vue2 当中，nextTick 可以理解为就是收集异步任务到队列当中并且开启异步任务去执行它们。它可以同时收集组件渲染的任务，以及用户手动放入的任务。组件渲染的任务是由 watcher 的 update 触发，并且将回调函数包装为异步任务，最后推到 nextTick 的队列里，等待执行。</p><p>而在 Vue3 当中，nextTick 则是利用 promise 的链式调用，将用户放入的回调放在更新视图之后的 then 里面调用，用户调用多少次 nextTick，就接着多少个 then。</p><h2 id="vue有那些性能优化" tabindex="-1"><a class="header-anchor" href="#vue有那些性能优化"><span>Vue有那些性能优化</span></a></h2><p><strong>编码阶段</strong></p><ul><li>v-if和v-for不一起使用</li><li>v-for保证key的唯一性</li><li>使用keep-alive缓存组件</li><li>v-if和v-show酌情使用</li><li>路由懒加载、异步组件</li><li>图片懒加载</li><li>节流防抖</li><li>第三方模块按需引入</li><li>服务端与渲染</li></ul><p><strong>打包优化</strong></p><ul><li>压缩代码</li><li>使用CDN加载第三方模块</li><li>抽离公共文件</li></ul><p><strong>用户体验</strong></p><ul><li>骨架屏</li><li>客户端缓存</li></ul><p><strong>SEO优化</strong></p><ul><li>预渲染</li><li>服务端渲染</li><li>合理使用 meta 标签</li></ul><h2 id="nexttick的使用和原理" tabindex="-1"><a class="header-anchor" href="#nexttick的使用和原理"><span>nextTick的使用和原理？</span></a></h2><p>功能：可以获取到更新后的DOM，nextTick返回一个Promise，是一个 异步行为。 因为vue采用的是异步更新策略，数据发生变化，DOM节点并不会立刻发生变化，而是开启一个队列，把组件更新函数保存在队列中，同一个事件循环中发生的所有数据变更会异步的批量更新。这一策略导致我们对数据的修改不能立刻的体现在DOM上，此时如果我们想获取更新后的DOM状态，就要使用nextTick。在开发时，一般两个场景用： 1、created中想要获取DOM时； 2、响应式数据变化后获取DOM更新后的状态</p><h2 id="v-model-是如何实现的-语法糖实际是什么" tabindex="-1"><a class="header-anchor" href="#v-model-是如何实现的-语法糖实际是什么"><span>v-model 是如何实现的，语法糖实际是什么？</span></a></h2><p>Vue 中数据双向绑定是一个指令v-model，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。</p><ul><li>当作用在表单上：通过v-bind:value绑定数据，v-on:input来监听数据变化并修改value</li><li>当作用在组件上：本质上是一个父子通信语法糖，通过props和$emit实现。</li></ul><h2 id="vue-mixin的使用场景" tabindex="-1"><a class="header-anchor" href="#vue-mixin的使用场景"><span>vue.mixin的使用场景</span></a></h2><p>使用场景： Vue.mixin是一种混入（mix-in）技术，可以在多个组件之间共享组件选项，包括生命周期方法、data选项等等，使用Vue.mixin可以将一些通用的功能或逻辑封装起来，让多个组件可共同调用这些相同的逻辑，避免了冗余代码的出现。</p><h2 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法"><span>diff算法</span></a></h2><p>diff 算法是一种通过同层的树节点进行比较的高效算法 其有两个特点： 比较只会在同层级进行, 不会跨层级比较 在diff比较的过程中，循环从两边向中间比较 diff 算法在很多场景下都有应用，在 vue 中，作用于虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较 原理：当数据发生改变时，set方法会调用Dep.notify通知所有订阅者Watcher，订阅者就会调用patch给真实的DOM打补丁，更新相应的视图</p><h2 id="vue核心是什么-vue和jquey的区别-vue与react" tabindex="-1"><a class="header-anchor" href="#vue核心是什么-vue和jquey的区别-vue与react"><span>vue核心是什么? vue和jquey的区别？vue与React</span></a></h2><p>vue最大特点我感觉就是“组件化“和”数据驱动“ 组件化就是可以将页面和页面中可复用的元素都看做成组件，写页面的过程，就是写组件，然后页面是由这些组件“拼接“起来的组件树 数据驱动就是让我们只关注数据层，只要数据变化，页面（即视图层）会自动更新，至于如何操作dom，完全交由vue去完成，咱们只关注数据，数据变了，页面自动同步变化了，很方便 jquery主要是玩dom操作的“神器“，强大的选择器,封装了好多好用的dom操作方法和如何获取ajax方法 例如：$.ajax（）非常好用 vue:主要用于数据驱动和组件化，很少操作dom，当然vue可能通过ref来选择一个dom或组件 vue与react： 相同点：数据驱动视图、组件化、都使用 Virtual DOM 不同点：核心思想不同、组件写法差异、diff算法不同、响应式原理不同</p><h2 id="sync修饰符" tabindex="-1"><a class="header-anchor" href="#sync修饰符"><span>.sync修饰符</span></a></h2><p>.sync修饰符是v-bind:xxx和@update:xxx的语法糖，在Vue3中已被移除，使用v-model:xxx替代。</p>`,53),t=[l];function h(p,d){return e(),s("div",null,t)}const c=i(n,[["render",h],["__file","常规.html.vue"]]),v=JSON.parse('{"path":"/%E7%9F%A5%E8%AF%86%E5%BA%93/vue2/%E5%B8%B8%E8%A7%84.html","title":"常规","lang":"zh-CN","frontmatter":{"description":"常规 解决花括号问题 标签样式中加 v-cloak v-克楼克 在css中加 vue是什么 Vue是一款基于MVVM架构的渐进式框架，它主要用于构建单页面应用（spa），它的特点有声明式渲染、响应式两大点 什么是响应式 响应式就是在我们修改数据之后，无需手动触发视图更新，视图会自动更新。 vue中data为什么是一个函数 vue的data是一个函数的原...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E7%9F%A5%E8%AF%86%E5%BA%93/vue2/%E5%B8%B8%E8%A7%84.html"}],["meta",{"property":"og:site_name","content":"遐想的猫"}],["meta",{"property":"og:title","content":"常规"}],["meta",{"property":"og:description","content":"常规 解决花括号问题 标签样式中加 v-cloak v-克楼克 在css中加 vue是什么 Vue是一款基于MVVM架构的渐进式框架，它主要用于构建单页面应用（spa），它的特点有声明式渲染、响应式两大点 什么是响应式 响应式就是在我们修改数据之后，无需手动触发视图更新，视图会自动更新。 vue中data为什么是一个函数 vue的data是一个函数的原..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-10T06:09:47.000Z"}],["meta",{"property":"article:author","content":"Mr.Liu"}],["meta",{"property":"article:modified_time","content":"2024-07-10T06:09:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常规\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-10T06:09:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Liu\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"解决花括号问题","slug":"解决花括号问题","link":"#解决花括号问题","children":[]},{"level":2,"title":"vue是什么","slug":"vue是什么","link":"#vue是什么","children":[]},{"level":2,"title":"什么是响应式","slug":"什么是响应式","link":"#什么是响应式","children":[]},{"level":2,"title":"vue中data为什么是一个函数","slug":"vue中data为什么是一个函数","link":"#vue中data为什么是一个函数","children":[]},{"level":2,"title":"Vue的优点? vue的缺点?","slug":"vue的优点-vue的缺点","link":"#vue的优点-vue的缺点","children":[]},{"level":2,"title":"v-if和v-show有何区别？","slug":"v-if和v-show有何区别","link":"#v-if和v-show有何区别","children":[]},{"level":2,"title":"为什么v-if和v-for不建议用在同一标签？","slug":"为什么v-if和v-for不建议用在同一标签","link":"#为什么v-if和v-for不建议用在同一标签","children":[]},{"level":2,"title":"computed(康pu 来的) 和watch(喔企)的区别","slug":"computed-康pu-来的-和watch-喔企-的区别","link":"#computed-康pu-来的-和watch-喔企-的区别","children":[]},{"level":2,"title":"为什么不建议用index做key，为什么不建议用随机数做key？","slug":"为什么不建议用index做key-为什么不建议用随机数做key","link":"#为什么不建议用index做key-为什么不建议用随机数做key","children":[]},{"level":2,"title":"nextTick(莱克斯 特克) 的使用场景和原理","slug":"nexttick-莱克斯-特克-的使用场景和原理","link":"#nexttick-莱克斯-特克-的使用场景和原理","children":[{"level":3,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"Vue有那些性能优化","slug":"vue有那些性能优化","link":"#vue有那些性能优化","children":[]},{"level":2,"title":"nextTick的使用和原理？","slug":"nexttick的使用和原理","link":"#nexttick的使用和原理","children":[]},{"level":2,"title":"v-model 是如何实现的，语法糖实际是什么？","slug":"v-model-是如何实现的-语法糖实际是什么","link":"#v-model-是如何实现的-语法糖实际是什么","children":[]},{"level":2,"title":"vue.mixin的使用场景","slug":"vue-mixin的使用场景","link":"#vue-mixin的使用场景","children":[]},{"level":2,"title":"diff算法","slug":"diff算法","link":"#diff算法","children":[]},{"level":2,"title":"vue核心是什么? vue和jquey的区别？vue与React","slug":"vue核心是什么-vue和jquey的区别-vue与react","link":"#vue核心是什么-vue和jquey的区别-vue与react","children":[]},{"level":2,"title":".sync修饰符","slug":"sync修饰符","link":"#sync修饰符","children":[]}],"git":{"createdTime":1720591787000,"updatedTime":1720591787000,"contributors":[{"name":"test","email":"email","commits":1}]},"readingTime":{"minutes":6.43,"words":1930},"filePathRelative":"知识库/vue2/常规.md","localizedDate":"2024年7月10日","excerpt":"\\n<h2>解决花括号问题</h2>\\n<p>标签样式中加 v-cloak   v-克楼克</p>\\n<p>在css中加</p>\\n<div class=\\"language-css line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"css\\" data-title=\\"css\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#C678DD\\">[</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#D19A66\\">v-cloak</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#C678DD\\">]</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#ABB2BF\\">    display</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">:</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">none</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> !important</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,v as data};
